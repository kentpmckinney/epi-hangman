{"version":3,"sources":["components/App.js","index.js","reducers/reducer.js"],"names":["App","props","handleGuessClick","event","dispatch","type","letterGuessed","document","getElementById","value","state","secretWord","revealedWord","bodyPartsRemaining","className","this","join","id","onClick","React","Component","connect","store","createStore","action","newState","replace","newState2","oldRevealedWord","split","newRevealedWord","forEach","letter","index","isDashed","isGuessedLetterEqualToSecretLetter","push","isLetterInSecretWord","includes","newBodyPartsRemaining","pop","subscribe","console","log","getState","ReactDOM","render"],"mappings":"0PAIMA,G,wDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAKRC,iBAAmB,SAAAC,GACjB,EAAKF,MAAMG,SAAS,CAAEC,KAAM,gBAAiBC,cAAeC,SAASC,eAAe,SAASC,SAL7F,EAAKC,MAAQ,CAAEC,WAAY,GAAIL,cAAe,GAAIM,aAAc,GAAIC,mBAAoB,IACxFZ,EAAMG,SAAS,CAAEC,KAAM,kBAAmBM,WAAY,gBAHrC,E,qDAWjB,OACE,yBAAKG,UAAU,OACb,oDACmBC,KAAKd,MAAMW,cAC5B,6BAFF,gCAG4BG,KAAKd,MAAMY,mBAAqBE,KAAKd,MAAMY,mBAAmBG,KAAK,MAAQ,KAEvG,2BAAOC,GAAG,UACV,4BAAQC,QAASH,KAAKb,kBAAtB,c,GApBUiB,IAAMC,YAmCTpB,EADfA,EAAMqB,aARkB,SAAAX,GACtB,MAAO,CACLC,WAAYD,EAAMC,WAClBL,cAAeI,EAAMJ,cACrBM,aAAcF,EAAME,aACpBC,mBAAoBH,EAAMG,sBAGxBQ,CAAyBrB,G,OC/BzBsB,EAAQC,aCPC,WAAyB,IAAxBb,EAAuB,uDAAf,GAAIc,EAAW,uCACrC,OAAQA,EAAOnB,MACb,IAAK,kBACH,IAAIoB,EAAW,GAKf,OAJAA,EAASd,WAAaa,EAAOb,WAC7Bc,EAASnB,cAAgB,GACzBmB,EAASb,aAAeY,EAAOb,WAAWe,QAAQ,QAAS,KAC3DD,EAASZ,mBAAqB,CAAC,OAAQ,QAAS,WAAY,YAAa,YAAa,aAAc,WAAY,YAAa,YAAa,cACnIY,EACT,IAAK,gBACH,IAAIE,EAAY,GAChBA,EAAUrB,cAAgBkB,EAAOlB,cACjCqB,EAAUhB,WAAaD,EAAMC,WAC7B,IAAIiB,EAAkBlB,EAAME,aAC5BgB,EAAkBA,EAAgBC,MAAM,IACxC,IAAIC,EAAkB,GACtBF,EAAgBG,SAAQ,SAACC,EAAQC,GAC/B,IAAMC,EAAsB,MAAXF,EACXG,EAAqCX,EAAOlB,gBAAkBI,EAAMC,WAAWkB,MAAM,IAAII,GAC3FC,EACEC,EACFL,EAAgBM,KAAKZ,EAAOlB,eAE5BwB,EAAgBM,KAAK,KAGvBN,EAAgBM,KAAKJ,MAGzBL,EAAUf,aAAekB,EAAgBd,KAAK,IAC9CW,EAAUd,mBAAqBH,EAAMG,mBACrC,IAAMwB,EAAuB3B,EAAMC,WAAW2B,SAASd,EAAOlB,eAC9D,GAAI+B,EAEF,OAAOV,EAGP,IAAIY,EAAwBZ,EAAUd,mBAGtC,OAFA0B,EAAsBC,MACtBb,EAAUd,mBAAqB0B,EACxBZ,EAEX,QACE,OAAOjB,MDlCbY,EAAMmB,WAAU,kBACdC,QAAQC,IAAIrB,EAAMsB,eAGpBC,IAASC,OACP,kBAAC,IAAD,CAAUxB,MAAOA,GACf,kBAAC,EAAD,OAEFf,SAASC,eAAe,W","file":"static/js/main.f6ec0765.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { secretWord: '', letterGuessed: '', revealedWord: '', bodyPartsRemaining: '' }\n    props.dispatch({ type: 'SET_SECRET_WORD', secretWord: 'abracadabra' })\n  }\n\n  handleGuessClick = event => {\n    this.props.dispatch({ type: 'SUBMIT_LETTER', letterGuessed: document.getElementById('input').value });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          {`Secret Word: ${this.props.revealedWord}`}\n          <br />\n          {`Body Parts Remaining: ${this.props.bodyPartsRemaining ? this.props.bodyPartsRemaining.join(', ') : ''}`}\n        </div>\n        <input id='input'></input>\n        <button onClick={this.handleGuessClick}>Guess</button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    secretWord: state.secretWord,\n    letterGuessed: state.letterGuessed,\n    revealedWord: state.revealedWord,\n    bodyPartsRemaining: state.bodyPartsRemaining\n  }\n}\nApp = connect(mapStateToProps)(App);\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { createStore } from 'redux';\nimport reducer from './reducers/reducer';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(reducer);\n\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","export default (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_SECRET_WORD':\n      let newState = {};\n      newState.secretWord = action.secretWord;\n      newState.letterGuessed = '';\n      newState.revealedWord = action.secretWord.replace(/.{1}/g, '-');\n      newState.bodyPartsRemaining = ['head', 'torso', 'left arm', 'right arm', 'left hand', 'right hand', 'left leg', 'right leg', 'left foot', 'right foot'];\n      return newState;\n    case 'SUBMIT_LETTER':\n      let newState2 = {};\n      newState2.letterGuessed = action.letterGuessed;\n      newState2.secretWord = state.secretWord;\n      let oldRevealedWord = state.revealedWord;\n      oldRevealedWord = oldRevealedWord.split('');\n      let newRevealedWord = [];\n      oldRevealedWord.forEach((letter, index) => {\n        const isDashed = letter === '-';\n        const isGuessedLetterEqualToSecretLetter = action.letterGuessed === state.secretWord.split('')[index];\n        if (isDashed) {\n          if (isGuessedLetterEqualToSecretLetter) {\n            newRevealedWord.push(action.letterGuessed);\n          } else {\n            newRevealedWord.push('-');\n          }\n        } else {\n          newRevealedWord.push(letter);\n        }\n      });\n      newState2.revealedWord = newRevealedWord.join('');\n      newState2.bodyPartsRemaining = state.bodyPartsRemaining;\n      const isLetterInSecretWord = state.secretWord.includes(action.letterGuessed);\n      if (isLetterInSecretWord) {\n        // secret word contains the letter\n        return newState2;\n      } else {\n        // secret word does NOT contain the letter\n        let newBodyPartsRemaining = newState2.bodyPartsRemaining;\n        newBodyPartsRemaining.pop();\n        newState2.bodyPartsRemaining = newBodyPartsRemaining;\n        return newState2;\n      }\n    default:\n      return state;\n  }\n}"],"sourceRoot":""}