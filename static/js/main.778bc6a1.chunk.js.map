{"version":3,"sources":["components/Drawing/Drawing.js","components/Form/Form.js","components/Display/Display.js","components/App.js","index.js","reducers/reducer.js"],"names":["Drawing","this","drawHangman","props","bodyParts","canvas","document","getElementById","context","getContext","clearRect","width","height","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke","find","item","arc","Math","PI","closePath","id","React","Component","Form","onSubmit","onLetterSubmitted","maxLength","Display","className","revealedWord","split","map","letter","index","key","App","handleLetterSubmit","event","preventDefault","dispatch","type","letterGuessed","target","input","value","secretWord","connect","state","gameOver","hasWon","store","createStore","action","newState","replace","Object","assign","oldRevealedWord","newRevealedWord","forEach","isDashed","isGuessedLetterEqualToSecretLetter","push","join","isLetterInSecretWord","includes","length","ReactDOM","render"],"mappings":"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","file":"static/js/main.778bc6a1.chunk.js","sourcesContent":["import React from 'react';\n\nclass Drawing extends React.Component {\n\n  componentDidMount() {\n    this.drawHangman(this.props.bodyParts)\n  }\n\n  componentDidUpdate() {\n    this.drawHangman(this.props.bodyParts)\n  }\n\n  drawHangman(bodyParts) {\n    var canvas = document.getElementById('canvas');\n    var context = canvas.getContext('2d');\n\n    // Clear the Canvas\n    context.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw the scaffold\n    context.beginPath();\n    context.lineWidth = 3;\n    context.strokeStyle = 'black';\n    context.moveTo(10, 290);\n    context.lineTo(200, 290);\n    context.lineTo(200, 10);\n    context.lineTo(100, 10);\n    context.lineTo(100, 60);\n    context.stroke();\n\n    if (bodyParts.find(item => item === 'head')) {\n      context.beginPath();\n      context.arc(100, 80, 20, 0, Math.PI * 2, true);\n      context.closePath();\n      context.lineWidth = 3;\n      context.stroke();\n    }\n\n    if (bodyParts.find(item => item === 'torso')) {\n      context.beginPath();\n      context.lineWidth = 3;\n      context.moveTo(100, 100);\n      context.lineTo(100, 130);\n      context.lineTo(93, 130);\n      context.lineTo(93, 200);\n      context.lineTo(107, 200);\n      context.lineTo(107, 130);\n      context.lineTo(100, 130);\n      context.closePath();\n      context.stroke();\n    }\n\n    if (bodyParts.find(item => item === 'left arm')) {\n      context.beginPath();\n      context.lineWidth = 3;\n      context.moveTo(93, 130);\n      context.lineTo(70, 180);\n      context.closePath();\n      context.stroke();\n    }\n\n    if (bodyParts.find(item => item === 'right arm')) {\n      context.beginPath();\n      context.lineWidth = 3;\n      context.moveTo(107, 130);\n      context.lineTo(130, 180);\n      context.closePath();\n      context.stroke();\n    }\n\n    if (bodyParts.find(item => item === 'left leg')) {\n      context.beginPath();\n      context.lineWidth = 3;\n      context.moveTo(93, 200);\n      context.lineTo(80, 260);\n      context.closePath();\n      context.stroke();\n    }\n\n    if (bodyParts.find(item => item === 'right leg')) {\n      context.beginPath();\n      context.lineWidth = 3;\n      context.moveTo(107, 200);\n      context.lineTo(120, 260);\n      context.closePath();\n      context.stroke();\n    }\n  }\n\n  render() {\n    return (\n      <canvas id=\"canvas\" width=\"210\" height=\"300\"> </canvas>\n    );\n  }\n\n}\n\nexport default Drawing;","import React from 'react';\n\nconst Form = props => {\n  return (\n    <form onSubmit={props.onLetterSubmitted}>\n      <input id='input' maxLength='1' />\n      <button>Submit</button>\n    </form>\n  )\n}\n\nexport default Form;","import React from 'react';\nimport './Display.css';\n\nconst Display = props => {\n  return (\n    <div className='secret-word'>\n      {props.revealedWord.split('').map((letter, index) => <span key={`letter-${index}`} className='letter'>{letter}</span>)}\n    </div>\n  )\n}\n\nexport default Display;","import React from 'react';\nimport { connect } from 'react-redux';\nimport Drawing from './Drawing/Drawing';\nimport Form from './Form/Form';\nimport Display from './Display/Display';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    props.dispatch({ type: 'SET_SECRET_WORD', secretWord: 'abracadabra' })\n  }\n\n  handleLetterSubmit = event => {\n    event.preventDefault();\n    this.props.dispatch({ type: 'SUBMIT_LETTER', letterGuessed: event.target.input.value });\n    event.target.input.value = '';\n  }\n\n  render() {\n    if (this.props.secretWord) {\n      return (\n        <div className=\"App\">\n          <Drawing bodyParts={this.props.bodyParts} />\n          <Display revealedWord={this.props.revealedWord} />\n          <br />\n          <Form onLetterSubmitted={this.handleLetterSubmit} />\n        </div>\n      );\n    }\n    else {\n      return <div className=\"App\"></div>\n    }\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    secretWord: state.secretWord,\n    letterGuessed: state.letterGuessed,\n    revealedWord: state.revealedWord,\n    bodyParts: state.bodyParts,\n    gameOver: state.gameOver,\n    hasWon: state.hasWon\n  }\n}\nApp = connect(mapStateToProps)(App);\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { createStore } from 'redux';\nimport reducer from './reducers/reducer';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","export default (state = {}, action) => {\n  let newState = {};\n  switch (action.type) {\n    case 'SET_SECRET_WORD':\n      newState.secretWord = action.secretWord;\n      newState.letterGuessed = '';\n      newState.revealedWord = action.secretWord.replace(/.{1}/g, '-');\n      newState.bodyParts = [];\n      newState.gameOver = false;\n      newState.hasWon = false;\n      return newState;\n    case 'SUBMIT_LETTER':\n      Object.assign(newState, state);\n      newState.letterGuessed = action.letterGuessed;\n      newState.secretWord = state.secretWord;\n      newState.hasWon = state.hasWon;\n      newState.gameOver = state.gameOver;\n      let oldRevealedWord = state.revealedWord;\n      oldRevealedWord = oldRevealedWord.split('');\n      let newRevealedWord = [];\n      oldRevealedWord.forEach((letter, index) => {\n        const isDashed = letter === '-';\n        const isGuessedLetterEqualToSecretLetter = action.letterGuessed === state.secretWord.split('')[index];\n        if (isDashed) {\n          if (isGuessedLetterEqualToSecretLetter) {\n            newRevealedWord.push(action.letterGuessed);\n          } else {\n            newRevealedWord.push('-');\n          }\n        } else {\n          newRevealedWord.push(letter);\n        }\n      });\n      newState.revealedWord = newRevealedWord.join('');\n      if (newState.revealedWord === state.secretWord) { newState.hasWon = true; }\n      newState.bodyParts = state.bodyParts;\n      const isLetterInSecretWord = state.secretWord.includes(action.letterGuessed);\n      if (isLetterInSecretWord) {\n        return newState;\n      } else {\n        switch (newState.bodyParts[newState.bodyParts.length - 1]) {\n          case 'left leg': newState.bodyParts.push('right leg');\n            newState.gameOver = true;\n            break;\n          case 'right arm': newState.bodyParts.push('left leg');\n            break;\n          case 'left arm': newState.bodyParts.push('right arm');\n            break;\n          case 'torso': newState.bodyParts.push('left arm');\n            break;\n          case 'head': newState.bodyParts.push('torso');\n            break;\n          default: newState.bodyParts.push('head');\n            break;\n        }\n        return newState;\n      }\n    default:\n      return state;\n  }\n}"],"sourceRoot":""}